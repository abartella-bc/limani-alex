stages:
  - install
  - test
  - pre_deploy_check
  - deploy
  - coverity

variables:
  DOCKER_PROXY: $DOCKER_PROXY_REPLACE_LATER
  NODE_IMAGE: $DOCKER_PROXY/node:lts-alpine
  COVERITY_IMAGE: $COVERITY_IMAGE_REPLACE_LATER
  COVERITY_SERVER: $COVERITY_SERVER_REPLACE_LATER

default:
  image: $NODE_IMAGE

cache:
  key:
    files:
      - package-lock.json
  paths:
    - .npm/

install:
  stage: install
  script:
    - node --version
    - npm --version
    - npm run pre-publish-setup
    - npm run set-token
    - npm ci --cache .npm --prefer-offline
  artifacts:
    expire_in: 30 mins
    paths:
      - node_modules/
  rules:
    - when: always

prettier:
  stage: test
  script:
    - npx prettier --check --config ./.prettierrc . --ignore-path ./.prettierignore
  rules:
    - when: always

style_lint:
  stage: test
  script: npm run lint-styles
  rules:
    - when: always

jest_test:
  stage: test
  script:
    - npm run test-ci
  rules:
    - when: always

check_product_version:
  stage: pre_deploy_check
  script:
    - npm run pre-publish-setup
    - npm run set-token
    - export USAGE=$(jq -r '.usage' package.json)
    - export CURRENT_VERSION=$(jq -r '.version' package.json)
    - export DEV_PACKAGE_NAME_PATTERN="^[0-9]+\.[0-9]+\.[0-9]+-dev$"
    - export GA_PACKAGE_NAME_PATTERN="^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)"
    - | 
      if [ "$USAGE" == "dev" ]; 
      then
        export REMOTE_VERSION=$(npm view @bluecat/limani@dev version)
        if ! test "$(echo "$CURRENT_VERSION" | grep -E "$DEV_PACKAGE_NAME_PATTERN")"; 
        then
          echo "Invalid DEV version or missing -dev suffix"
          exit 1
        fi
        local_version_without_suffix=${CURRENT_VERSION%-dev}
        remote_version_without_suffix=${REMOTE_VERSION%-dev}
        if test "$(echo "$local_version_without_suffix $remote_version_without_suffix" | tr " " "\n" | sort -V | head -n 1)" == "$local_version_without_suffix";
        then
          echo "Please ensure the Limani package version is greater than the current version in package.json file."
          exit 1
        fi
      elif [ "$USAGE" == "ga" ];
      then
        export REMOTE_VERSION=$(npm view @bluecat/limani version)
        if ! test "$(echo "$CURRENT_VERSION" | grep -E "$GA_PACKAGE_NAME_PATTERN")";
        then
          echo "Invalid GA version for the package."
          exit 1
        fi
        if test "$(echo "$CURRENT_VERSION $REMOTE_VERSION" | tr " " "\n" | sort -V | head -n 1)" == "$CURRENT_VERSION";
        then
          echo "Please ensure the Limani package version is greater than the current version in package.json file."
          exit 1
        fi
      else
        echo "Invalid value for usage attribute in package.json file."
        exit 1
      fi
  before_script:
    - apk add jq
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - src/**/*
        - less/**/*
        - package.json

check_building_product:
  stage: pre_deploy_check
  script:
    - npm run pre-publish-setup
    - npm run set-token
    - npm run build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - src/**/*
        - package.json

build_deploy_product:
  stage: deploy
  script:
    - npm run pre-publish-setup
    - npm run set-token
    - export USAGE=$(jq -r '.usage' package.json)
    - export CURRENT_VERSION=$(jq -r '.version' package.json)
    - |
      if [ "$USAGE" == "dev" ];
      then
       export REMOTE_VERSION=$(npm view @bluecat/limani@dev version)
       remote_version_without_suffix=${REMOTE_VERSION%-dev}
       local_version_without_suffix=${CURRENT_VERSION%-dev}
      else
        export REMOTE_VERSION=$(npm view @bluecat/limani version)
        remote_version_without_suffix=$REMOTE_VERSION
        local_version_without_suffix=$CURRENT_VERSION
      fi
    - |
      if test "$(echo "$local_version_without_suffix $remote_version_without_suffix" | tr " " "\n" | sort -V | head -n 1)" == "$local_version_without_suffix";
      then
        echo "Package version seems to have not updated, not deploying a new version of Limani"
      else
        echo "Publishing new version of Limani package, version: $CURRENT_VERSION"
        npm run build
        if [ "$USAGE" == "dev" ]; 
        then
          npm run publish-dev-package
        else
          npm run publish-package
        fi
      fi
  before_script:
    - apk add jq
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'

build_deploy_storybook:
  stage: deploy
  script:
    - export STATIC_FILES_PATH=$(jq -r '.staticFilesPath' pipeline/config.json)
    - npm run storybook-build-static
    - sshpass -p "$STORYBOOK_VM_PASSWORD" ssh -o StrictHostKeyChecking=no "$STORYBOOK_VM_USERNAME"@"$STORYBOOK_VM_IP_ADDRESS" "rm -rf ~/storybook_static_files/${STATIC_FILES_PATH} && mkdir -p ~/storybook_static_files/${STATIC_FILES_PATH}"
    - sshpass -p "$STORYBOOK_VM_PASSWORD" scp -o StrictHostKeyChecking=no -r storybook-static/* "$STORYBOOK_VM_USERNAME"@"$STORYBOOK_VM_IP_ADDRESS":~/storybook_static_files/"$STATIC_FILES_PATH"
    - sshpass -p "$STORYBOOK_VM_PASSWORD" scp -o StrictHostKeyChecking=no -r pipeline/* "$STORYBOOK_VM_USERNAME"@"$STORYBOOK_VM_IP_ADDRESS":~/storybook_static_files
    - sshpass -p "$STORYBOOK_VM_PASSWORD" ssh -o StrictHostKeyChecking=no "$STORYBOOK_VM_USERNAME"@"$STORYBOOK_VM_IP_ADDRESS" "chmod -R 755 ~/storybook_static_files/${STATIC_FILES_PATH}"
    - sshpass -p "$STORYBOOK_VM_PASSWORD" ssh -o StrictHostKeyChecking=no "$STORYBOOK_VM_USERNAME"@"$STORYBOOK_VM_IP_ADDRESS" 'chmod +x ~/storybook_static_files/update-deploy-nginx-server.sh && ~/storybook_static_files/update-deploy-nginx-server.sh'
  before_script:
    - apk add openssh-client jq sshpass
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^(release.*|main)$/'

limani:
  stage: coverity
  image: $COVERITY_IMAGE
  before_script:
    - chmod 400 $COVERITY_AUTH_KEY_FILE
    - stream="limani_master"
  script:
    - cov-build --config ./coverity/config.xml --dir ./coverity/scan/ --fs-capture-search ./src --no-command
    - cov-analyze --dir ./coverity/scan/ --strip-path $PWD --all
    - cov-commit-defects 
      --dir ./coverity/scan/ 
      --url $COVERITY_SERVER
      --stream $stream
      --version $CI_COMMIT_SHORT_SHA
      --auth-key-file $COVERITY_AUTH_KEY_FILE
  only:
    refs:
      - main
    changes:
      - src/**/*